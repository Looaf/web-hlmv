import * as path                                  from 'path'
import * as fs                                    from 'fs'
import { parseModel }                             from '../lib/modelDataParser'
import { getBoneQuaternions, calcBoneQuaternion } from '../lib/geometryTransformer'

const leetPath = path.resolve(__dirname, '../mdl/leet.mdl')
const leetBuffer: ArrayBuffer = fs.readFileSync(leetPath).buffer
const leetModelData = parseModel(leetBuffer)

const mockDummyQuaternions = [
  new Float32Array([-0.004799471702426672, 0.15218494832515717, 0.018867794424295425, 0.988160252571106]),
  new Float32Array([-0.5000860095024109, -0.4999139904975891, -0.4999133348464966, 0.5000866651535034]),
  new Float32Array([0.006595461629331112, 0.020313262939453125, 0.1068110316991806, 0.9940499067306519]),
  new Float32Array([0.008692536503076553, 0.021258439868688583, 0.010715355165302753, 0.9996787905693054]),
  new Float32Array([0.008702714927494526, 0.021260591223835945, 0.010727975517511368, 0.9996785521507263]),
  new Float32Array([0.008693789131939411, 0.02125825360417366, 0.010699929669499397, 0.9996789693832397]),
  new Float32Array([0.009485488757491112, -0.020114557817578316, 0.12137843668460846, 0.9923571348190308]),
  new Float32Array([-0.06367320567369461, -0.049618422985076904, -0.16836953163146973, 0.9824130535125732]),
  new Float32Array([0.7041451334953308, -0.06465106457471848, 0.7041449546813965, 0.06465108692646027]),
  new Float32Array([-0.6469963788986206, 0.11803785711526871, -0.75081467628479, -0.06115631014108658]),
  new Float32Array([-0.18861521780490875, 0.19299238920211792, -0.046497635543346405, 0.9617776274681091]),
  new Float32Array([0, 0, -0.5390031933784485, 0.8423037528991699]),
  new Float32Array([-0.7544722557067871, -0.09065550565719604, -0.1825445145368576, 0.6238835453987122]),
  new Float32Array([0.680263876914978, 0.31664273142814636, 0.05635828897356987, 0.6586365699768066]),
  new Float32Array([0, 0, 0.00001362909097224474, 1]),
  new Float32Array([-0.0003964841889683157, 0.00003817445758613758, 0.09584566205739975, 0.9953961372375488]),
  new Float32Array([0, 0, 0.19596080482006073, 0.9806117415428162]),
  new Float32Array([0, 0, 0.09887245297431946, 0.9951001405715942]),
  new Float32Array([-0.7507283687591553, 0, 0, 0.6606110334396362]),
  new Float32Array([-0.7349988222122192, -0.048081520944833755, -0.10016971826553345, 0.6689028143882751]),
  new Float32Array([0, 0, -0.87721186876297, 0.4801034927368164]),
  new Float32Array([0.09173112362623215, 0, 0, 0.995783805847168]),
  new Float32Array([-0.1474485993385315, 0.17346057295799255, -0.059680450707674026, 0.971909761428833]),
  new Float32Array([-0.07327695190906525, 0.08622408658266068, -0.029674522578716278, 0.993134081363678]),
  new Float32Array([0.6267435550689697, 0.0034987579565495253, -0.7619068026542664, -0.16333486139774323]),
  new Float32Array([0.33983704447746277, -0.17161209881305695, -0.36388099193573, 0.8500886559486389]),
  new Float32Array([0, 0, -0.6584745645523071, 0.7526029944419861]),
  new Float32Array([0.8480516672134399, 0.32208484411239624, 0.07048605382442474, 0.4148511290550232]),
  new Float32Array([-0.749502420425415, -0.035509876906871796, 0.30153805017471313, 0.5882685780525208]),
  new Float32Array([0, 0, 0.00000832806108519435, 1]),
  new Float32Array([0.0003964841889683157, -0.00003817445758613758, 0.09584566205739975, 0.9953961372375488]),
  new Float32Array([0, 0, 0.875031590461731, 0.48406580090522766]),
  new Float32Array([0, 0, 0.5081860423088074, 0.8612473011016846]),
  new Float32Array([0.7981335520744324, 0.17133747041225433, 0.03878134861588478, 0.5763005614280701]),
  new Float32Array([0.8172662854194641, 0, 0, 0.5762602090835571]),
  new Float32Array([0, 0, -0.9106243252754211, 0.41323527693748474]),
  new Float32Array([-0.12199254333972931, 0, 0, 0.9925310015678406]),
  new Float32Array([0.11555688083171844, -0.05633307248353958, -0.12357725203037262, 0.9839724898338318]),
  new Float32Array([0.11555688083171844, -0.05633307248353958, -0.12357725203037262, 0.9839724898338318]),
  new Float32Array([0, 0, 0, 1]),
  new Float32Array([0.1541273593902588, 0.9878976941108704, 0.0070537687279284, 0.015910178422927856]),
  new Float32Array([-0.1185717061161995, -0.9920470714569092, -0.02797525003552437, 0.031634844839572906]),
  new Float32Array([-0.210211843252182, -0.9748041033744812, -0.04315834119915962, 0.06087110564112663]),
  new Float32Array([0, 0, -0.7982310056686401, 0.6023514270782471]),
  new Float32Array([0.06686011701822281, 0.04798000678420067, -0.019783616065979004, 0.9964116811752319]),
  new Float32Array([0, 0, 0.7071066498756409, 0.70710688829422]),
  new Float32Array([0.033592090010643005, 0.02680923417210579, -0.01065233163535595, 0.999019205570221]),
  new Float32Array([0, 0, -0.9013131856918335, 0.4331679940223694]),
  new Float32Array([0.23054151237010956, 0.9726744294166565, 0.009628857485949993, 0.025736454874277115]),
  new Float32Array([0, 0, -0.335235059261322, 0.9421344995498657]),
  new Float32Array([-0.1563543826341629, 0.058718886226415634, -0.311870813369751, 0.9353299140930176]),
  new Float32Array([0, 0, 0.7071066498756409, 0.70710688829422]),
  new Float32Array([-0.10863108932971954, 0.043580129742622375, -0.21775686740875244, 0.9689592123031616]),
  new Float32Array([0, 0, -0.7582980990409851, 0.6519079804420471]),
  new Float32Array([-0.03363533690571785, 0.7063062191009521, 0.033635325729846954, 0.7063064575195312])
]

describe('test geometry transform', () => {
  test('should calculate valid quaternion of one bone of one frame of one sequence', () => {
    const sequenceIndex = 0
    const frame = 0
    const boneIndex = 0
    const bone = leetModelData.bones[boneIndex]
    const animOffset = leetModelData.animations[sequenceIndex][boneIndex].offset
    const animValues = leetModelData.animValues

    expect(calcBoneQuaternion(frame, bone, animOffset, animValues, boneIndex, sequenceIndex, 0)).toEqual(
      new Float32Array([-0.004799471702426672, 0.15218494832515717, 0.018867794424295425, 0.988160252571106])
    )
  })

  test('should generate valid quaternions of all bones of one', () => {
    const bodyPartIndex = 0
    const sequenceIndex = 0
    const frame = 0

    const boneQuaternions = getBoneQuaternions(
      leetModelData.bones,
      leetModelData.animations[bodyPartIndex],
      leetModelData.animValues,
      sequenceIndex,
      frame
    )

    expect(boneQuaternions).toEqual(mockDummyQuaternions)
  })
})
